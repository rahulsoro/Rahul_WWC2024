
Minimun  non zero product of an Array Elements
You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:
 Choose two elements x and y from nums.
Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.
For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.
Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.

#include <vector>

using namespace std;

const int MOD = 1e9 + 7;

int minNonZeroProduct(int p) {
    // Calculate 2^p - 1
    long long max_num = (1LL << p) - 1; 

    // Calculate the number of 1-bits in max_num
    int num_ones = __builtin_popcountll(max_num); 

    // Calculate the product of all numbers except the maximum number
    long long product = 1;
    for (int i = 1; i < max_num; ++i) {
        product = (product * i) % MOD;
    }

    // Calculate the product of the maximum number raised to the power of (num_ones - 1)
    long long max_num_power = 1;
    for (int i = 0; i < num_ones - 1; ++i) {
        max_num_power = (max_num_power * max_num) % MOD;
    }

    return (product * max_num_power) % MOD;
}
