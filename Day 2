// #include <iostream>
// #include <vector>
// using namespace std;

// struct TreeNode {
//     int val;
//     TreeNode *left;
//     TreeNode *right;
//     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
// };

// TreeNode* sortedArrayToBST(vector<int>& nums, int start, int end) {
//     if (start > end) {
//         return nullptr;
//     }

//     int mid = start + (end - start) / 2;

//     TreeNode* root = new TreeNode(nums[mid]);

//     root->left = sortedArrayToBST(nums, start, mid - 1);
//     root->right = sortedArrayToBST(nums, mid + 1, end);

//     return root;
// }

// TreeNode* sortedArrayToBST(vector<int>& nums) {
//     return sortedArrayToBST(nums, 0, nums.size() - 1);
// }

// void inOrderTraversal(TreeNode* root) {
//     if (root == nullptr) {
//         return;
//     }
//     inOrderTraversal(root->left);
//     cout << root->val << " ";
//     inOrderTraversal(root->right);
// }

// int main() {
//     vector<int> nums = {1, 5, 9, 15, 19};

//     TreeNode* root = sortedArrayToBST(nums);

//     cout << "In-order Traversal of the BST: ";
//     inOrderTraversal(root);
//     cout << endl;

//     return 0;
// }















// #include <iostream>
// #include <vector>
// #include <unordered_set>
// using namespace std;

// bool isValidSudoku(vector<vector<char>>& board) {

//     vector<unordered_set<char>> rows(9);
//     vector<unordered_set<char>> cols(9);
//     vector<unordered_set<char>> boxes(9);

//     for (int i = 0; i < 9; i++) {
//         for (int j = 0; j < 9; j++) {
//             char num = board[i][j];

//             if (num == '.') continue;

//             if (rows[i].count(num)) return false;
//             rows[i].insert(num);

//             if (cols[j].count(num)) return false;
//             cols[j].insert(num);

//             int boxIndex = (i / 3) * 3 + (j / 3);
//             if (boxes[boxIndex].count(num)) return false;
//             boxes[boxIndex].insert(num);
//         }
//     }

//     return true;
// }

// int main() {
//     vector<vector<char>> board = {
//         {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
//         {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
//         {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
//         {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
//         {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
//         {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
//         {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
//         {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
//         {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
//     };

//     if (isValidSudoku(board)) {
//         cout << "The Sudoku board is valid." << endl;
//     } else {
//         cout << "The Sudoku board is invalid." << endl;
//     }

//     return 0;
// }












#include <iostream>
#include <vector>
using namespace std;

int removeDuplicates(vector<int>& nums) {
    if (nums.empty()) return 0;

    int uniqueIndex = 0; 

    for (int i = 1; i < nums.size(); i++) {
        if (nums[i] != nums[uniqueIndex]) {
            uniqueIndex++;
            nums[uniqueIndex] = nums[i];
        }
    }

    return uniqueIndex + 1; 
}

int main() {
    vector<int> nums = {5, 5, 8, 1, 1, 2, 2, 3, 3, 4, 7};

    int uniqueCount = removeDuplicates(nums);

    cout << "Number of unique elements: " << uniqueCount << endl;
    cout << "Array after removing duplicates: ";
    for (int i = 0; i < uniqueCount; i++) {
        cout << nums[i] << " ";
    }
    cout << endl;

    return 0;
}
